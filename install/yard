#!/bin/bash -e
VERSION=0.3.0

CONFIG=$HOME/.shipyard

# Allow install folder override for development
if [[ ! -z $CONFIG_TMP ]]; then
  CONFIG=$CONFIG_TMP
fi

function up() {
  local TYPE=$1
  local NAME=$2
  local CONSUL_PORT=$3
  local DASHBOARD_PORT=$4
  local CONSUL_VALUES=$5
  local NETWORK=$6
  local NETWORK_IP=$7
  local DOCKER_IMAGES=${@:8}

  docker run \
    --rm \
    --network host \
    -it \
    -v "/var/run/docker.sock:/var/run/docker.sock" \
    -v "$CONFIG:/files" \
    -v "$CONSUL_VALUES:/helm/consul-values.yaml" \
    -w "/files" nicholasjackson/consul-k8s-tools:$VERSION \
    bash -c "./yard create $TYPE $NAME $CONSUL_PORT $DASHBOARD_PORT $NETWORK $NETWORK_IP $DOCKER_IMAGES"
}

function down() {
  local TYPE=$1
  local NAME=$2

  # get forwarded ports and delete
  FORWARDED=$(docker ps -q --filter "name=^yard-$NAME-")
  if [[ "$FORWARDED" != "" ]]; then
    docker rm -f $FORWARDED
  fi

  docker run \
    --rm \
    --network host \
    -it \
    -v "/var/run/docker.sock:/var/run/docker.sock" \
    -v "$CONFIG:/files" \
    -w "/files" nicholasjackson/consul-k8s-tools:$VERSION \
    bash -c "./yard destroy $1 $2"
}

function expose_port() {
  local NAME=$1
  local SERVICE_NAME=$2
  local NETWORK_NAME=$3
  local NETWORK_IP=$4
  local BIND_IP=$5
  local NAMESPACE=$6
  local SERVICE_PORT=($@)

  
  if [ $(uname -s) == "Darwin" ]; then
    local EXPOSE_MD5=$(echo -n "$@" | md5 | awk '{print $1}')
  else
    local EXPOSE_MD5=$(echo -n "$@" | md5sum | awk '{print $1}')
  fi

  # Remove the other parameters
  unset 'SERVICE_PORT[0]'
  unset 'SERVICE_PORT[1]'
  unset 'SERVICE_PORT[2]'
  unset 'SERVICE_PORT[3]'
  unset 'SERVICE_PORT[4]'
  unset 'SERVICE_PORT[5]'

  LINKS="--link $NAME-control-plane \
         --link $NAME-worker"

  # read from state to determine server type
  if [ $(cat $CONFIG/yards/$NAME/state) == "k3s" ]; then
    LINKS="--network k3d-$NAME"
  fi

  COMMAND="kubectl get svc; kubectl get pods; "
  PORTS=""

  for port in ${SERVICE_PORT[@]}; do
    # Split each pair
    IFS=':' read -r -a PARTS <<< "$port"
    COMMAND+="kubectl port-forward --address 0.0.0.0 -n $NAMESPACE $SERVICE_NAME ${PARTS[0]}:${PARTS[1]} & "

    if [[ "$BIND_IP" != "none" ]]; then
      PORTS+=" -p $BIND_IP:${PARTS[0]}:${PARTS[0]}"
    fi
  done
  COMMAND+="tail -f /dev/null"

  docker run \
    --rm -it \
    -d \
    --name yard-$NAME-$EXPOSE_MD5\
    $PORTS \
    -v $CONFIG:/files $FOLDER \
    -e "KUBECONFIG=/files/yards/$NAME/kubeconfig-docker.yml" \
    $LINKS \
    nicholasjackson/consul-k8s-tools:$VERSION \
    bash -c "$COMMAND"

  if [[ "$NETWORK_IP" != "auto" ]]; then
    NETWORK_IP="--ip $NETWORK_IP"
  else
    NETWORK_IP=""
  fi

  # Attach to a second network
  if [[ "$NETWORK_NAME" != "null" ]]; then
    docker network connect $NETWORK_NAME yard-$NAME-$EXPOSE_MD5 $NETWORK_IP
  fi
}

function tools() {
  local NAME=$1
  local FOLDER=$2
  local COMMAND="bash"

  if [[ "$3" != "" ]]; then
    COMMAND="${@:3}"
  fi

  echo "To expose service in Kubernetes to localhost use:"
  echo "port forwarding e.g."
  echo ""
  echo "kubectl port-forward --address 0.0.0.0 svc/myservice 10000:80"
  echo ""

  # NOTE: Host networking does not work correctly on the Mac :(
  # we can access host services on localhost so kubectl works
  # however exposed services in the container do not get 
  # bound to the localhost ip
  if [ $(uname -s) == "Darwin" ]; then
    LINKS="--link $NAME-control-plane \
           --link $NAME-worker"
    CONSUL_ENV="-e CONSUL_HTTP_ADDR=http://$NAME-worker:30443"

    # read from state to determine server type
    if [ $(cat $CONFIG/yards/$NAME/state) == "k3s" ]; then
      LINKS="--network k3d-$NAME"
      CONSUL_ENV="-e CONSUL_HTTP_ADDR=http://k3d-$NAME-server:30443"
    fi

    echo "Mapping ports 10000-10100 on localhost to"
    echo "10000-10100 on container."
    echo ""

    echo "Linking container $LINKS"
    echo "Setting environment $CONSUL_ENV"
    echo ""
    echo ""

    docker run \
      --rm -it \
      -p 10000-10100:10000-10100 \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -v $CONFIG:/files \
      -v $FOLDER:/work \
      -w /work \
      -e "KUBECONFIG=/files/yards/$NAME/kubeconfig-docker.yml" \
      $CONSUL_ENV \
      $LINKS \
      nicholasjackson/consul-k8s-tools:$VERSION $COMMAND
      
    exit 0
  fi

  # For other systems default to Host networking
  echo "Using Host networking in docker"
  echo "Ports opened in the container will be accessible on the local machine"
  echo "at the same address and port"
  echo ""
  docker run \
    --rm -it \
    --network host \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v $CONFIG:/files \
    -v $FOLDER:/work \
    -e "KUBECONFIG=/files/yards/$NAME/kubeconfig.yml" \
    nicholasjackson/consul-k8s-tools:$VERSION $COMMAND
}

function vs_code() {
  local NAME=$1
  local FOLDER=$2
  local SETTINGS=$3

  echo "Starting VS Code"
  echo ""
  echo "When finished you can stop the VSCode server using the command:"
  echo "docker kill vscode"
  echo ""
    
  LINKS="--link $NAME-control-plane \
         --link $NAME-worker"
  CONSUL_ENV="-e CONSUL_HTTP_ADDR=http://$NAME-worker:30443"

  # read from state to determine server type
  if [ $(cat $CONFIG/yards/$NAME/state) == "k3s" ]; then
    LINKS="--network k3d-$NAME"
    CONSUL_ENV="-e CONSUL_HTTP_ADDR=http://k3d-$NAME-server:30443"
  fi
  
  # Here be dragons, this seems to work, but 
  # appologies for anyone debugging this
  # hacks on hacks to allow shipyard to work from inside vscode
  docker run --rm -it -d \
    -p 127.0.0.1:8080:8080 \
    -v "$FOLDER:/home/coder/project" \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v "$CONFIG:/files" \
    -v "$HOME/.shipyard:/root/.shipyard" \
    -v "$HOME/.shipyard:$HOME/.shipyard" \
    -v "$HOME/.shipyard/yard:/usr/local/bin/yard" \
    -v "$SETTINGS:/root/.local/share/code-server/User/settings.json" \
    --name vscode \
    --privileged \
    -e "KUBECONFIG=/files/yards/$NAME/kubeconfig-docker.yml" \
    -e "CONFIG_TMP=$HOME/.shipyard" \
    $CONSUL_ENV \
    $LINKS \
    nicholasjackson/code-server:$VERSION

  sleep 10
  
  if [ $(uname -s) == "Darwin" ]; then
    open "http://127.0.0.1:8080/?folder=/home/coder/project"
    exit 0
  fi

  xdg-open "http://127.0.0.1:8080/?folder=/home/coder/project"
}

function push_image() {
  local IMAGE=$1
  local NAME=$2

  if [ $(cat $CONFIG/yards/$NAME/state) == "k3s" ]; then
    local COMMAND="k3d import-images --name $NAME $IMAGE"
  else
    local COMMAND="kind load docker-image --name $NAME $IMAGE"
  fi

  docker run \
    --rm \
    --network host \
    -it \
    -v "/var/run/docker.sock:/var/run/docker.sock" \
    -v "$CONFIG:/files" \
    -w "/files" nicholasjackson/consul-k8s-tools:$VERSION \
    bash -c "$COMMAND"
}

function destroy() {
  local CLUSTER_NAME=$1

  kind delete cluster --name $CLUSTER_NAME
}

function destroy_k3s() {
  local CLUSTER_NAME=$1
  
  k3d delete --name $CLUSTER_NAME
}

function install_cluster() {
  local CLUSTER_NAME=$1
  local CONSUL_PORT=$2
  local DASHBOARD_PORT=$3 
  local NETWORK_NAME=$4
  local NETWORK_IP=$5
  local DOCKER_IMAGES=(${@:6})

	echo "#### Create Kubernetes cluster in Docker"
  echo ""

  # Check if cluster exists, if it does exit exit
  if kind get clusters | grep $CLUSTER_NAME; then
    echo "Cluster already exists"
    echo "Use \"yard down\" to delete cluster before running up again"
    exit 1
  fi

  # Modify config to add custom ports
  cat << EOF > /tmp/${CLUSTER_NAME}_config.yml
---
kind: Cluster
apiVersion: kind.sigs.k8s.io/v1alpha3
nodes:
- role: control-plane
- role: worker
  extraPortMappings:
  - containerPort: 30443
    hostPort: $CONSUL_PORT
  - containerPort: 30444
    hostPort: $DASHBOARD_PORT
EOF

	kind create cluster --config /tmp/${CLUSTER_NAME}_config.yml --name $CLUSTER_NAME

  mkdir -p ./yards/$CLUSTER_NAME

  # Export KubeConfig
  cat $(kind get kubeconfig-path --name $CLUSTER_NAME) > ./yards/$CLUSTER_NAME/kubeconfig.yml
 
  # Create a docker version of the config which replaces the address with the 
  # name of the container
  sed "s/127.0.0.1:[0-9]*/$CLUSTER_NAME-control-plane:6443/" ./yards/$CLUSTER_NAME/kubeconfig.yml > ./yards/$CLUSTER_NAME/kubeconfig-docker.yml
  
  # write to the state file
  echo "k8s" > ./yards/$CLUSTER_NAME/state

  # add the default images to the list of custom images
  DOCKER_IMAGES+=("k8s.gcr.io/pause:3.1")
  DOCKER_IMAGES+=("coredns/coredns:1.6.3")
  DOCKER_IMAGES+=("busybox:latest")
  DOCKER_IMAGES+=("kubernetesui/dashboard:v2.0.0-beta4")
  DOCKER_IMAGES+=("kubernetesui/metrics-scraper:v1.0.1")
  DOCKER_IMAGES+=("rancher/local-path-provisioner:v0.0.11")

  DOCKER_IMAGES+=("hashicorp/consul-k8s:0.9.2")
  DOCKER_IMAGES+=("consul:1.6.1")
  DOCKER_IMAGES+=("envoyproxy/envoy-alpine:v1.10.0")

  # Cache images locally for faster startup
  for i in "${DOCKER_IMAGES[@]}"
  do
    docker pull $i || true # ignore errors in case no internet
  done

  # Import the images to the server
  for i in "${DOCKER_IMAGES[@]}"
  do
    echo "kind load docker-image --name $CLUSTER_NAME $i"
    kind load docker-image --name $CLUSTER_NAME $i
  done
 
  # are we using a custom ip for the docker network
  if [[ "$NETWORK_IP" != "auto" ]]; then
    NETWORK_IP="--ip $NETWORK_IP"
  else
    NETWORK_IP=""
  fi
  
  # Attach to a second network
  if [[ "$NETWORK_NAME" != "null" ]]; then
    docker network connect $NETWORK_NAME $CLUSTER_NAME-control-plane
    docker network connect $NETWORK_NAME $CLUSTER_NAME-worker $NETWORK_IP
  fi
}

function install_cluster_k3s() {
  local CLUSTER_NAME=$1
  local CONSUL_PORT=$2
  local DASHBOARD_PORT=$3 
  local NETWORK_NAME=$4
  local NETWORK_IP=$5
  local DOCKER_IMAGES=(${@:6})

	echo "#### Create Kubernetes cluster in Docker using K3s"
  echo ""

  # Generate a random API server port
  API_SERVER_PORT=$(shuf -i 64000-65000 -n 1)
  
  k3d create \
    -n $CLUSTER_NAME \
    --publish $CONSUL_PORT:30443 \
    --publish $DASHBOARD_PORT:30444 \
    --wait 60 \
    --api-port $API_SERVER_PORT \
    --image rancher/k3s:v0.9.1 \
    --server-arg "--no-deploy=traefik"

  # add the default images to the list of custom images
  DOCKER_IMAGES+=("k8s.gcr.io/pause:3.1")
  DOCKER_IMAGES+=("coredns/coredns:1.6.3")
  DOCKER_IMAGES+=("busybox:latest")
  DOCKER_IMAGES+=("kubernetesui/dashboard:v2.0.0-beta4")
  DOCKER_IMAGES+=("kubernetesui/metrics-scraper:v1.0.1")
  DOCKER_IMAGES+=("rancher/local-path-provisioner:v0.0.11")

  DOCKER_IMAGES+=("hashicorp/consul-k8s:0.9.2")
  DOCKER_IMAGES+=("consul:1.6.1")
  DOCKER_IMAGES+=("envoyproxy/envoy-alpine:v1.10.0")

  # Cache images locally for faster startup
  for i in "${DOCKER_IMAGES[@]}"
  do
    docker pull $i || true # ignore errors in case no internet
  done
 
  # Import images from the local Docker instance to K8s
  k3d import-images -n $CLUSTER_NAME \
    ${DOCKER_IMAGES[*]}
  
  # Export KubeConfig
  mkdir -p /root/.config/k3d/$CLUSTER_NAME/
  mkdir -p ./yards/$CLUSTER_NAME
  
  k3d get-kubeconfig -n $CLUSTER_NAME
  mv /root/.config/k3d/$CLUSTER_NAME/kubeconfig.yaml ./yards/$CLUSTER_NAME/kubeconfig.yml

  # Create a docker version of the config which replaces the address with the 
  # name of the container
  sed "s/127.0.0.1:[0-9]*/k3d-$CLUSTER_NAME-server:$API_SERVER_PORT/" ./yards/$CLUSTER_NAME/kubeconfig.yml > ./yards/$CLUSTER_NAME/kubeconfig-docker.yml
  
  # write to the state file
  echo "k3s" > ./yards/$CLUSTER_NAME/state
  
  # are we using a custom ip for the docker network
  if [[ "$NETWORK_IP" != "auto" ]]; then
    NETWORK_IP="--ip $NETWORK_IP"
  else
    NETWORK_IP=""
  fi

  # Attach to a second network
  if [[ "$NETWORK_NAME" != "null" ]]; then
    docker network connect $NETWORK_NAME k3d-$CLUSTER_NAME-server $NETWORK_IP
  fi
}

function install_core() {
	# Wait for cluster to be available
	echo "#### Waiting for Kubernetes to start"
  echo ""

	until $(kubectl get pods); do
		sleep 1
	done

	echo "#### Install local storage controller for Kubernetes"
  echo ""
}

function install_k8s() {
  echo "#### Install K8s Config"
  echo ""

  # Install the CRDs for the controller
  kubectl apply -f ./config/k8s_config
}

function install_consul() {
  echo "#### Installing Consul using latest Helm chart"
  echo ""

	# Install the Consul helm chart	
	helm install -f /helm/consul-values.yaml consul ./config/helm-charts/consul-helm-0.9.0

  # Wait for Consul server to be ready
  echo "#### Waiting for Consul server to start"
  echo ""
  until kubectl get pods -l component=server --field-selector=status.phase=Running | grep "/1" | grep -v "0/"; do
    sleep 1
  done
  
  # Wait for Consul client to be ready
  echo "#### Waiting for Consul client to start"
  echo ""
  until kubectl get pods -l component=client --field-selector=status.phase=Running | grep "/1" | grep -v "0/"; do
    sleep 1
  done

  # Get a root ACL token and write to disk
  # kubectl get secret consul-consul-bootstrap-acl-token -o json | jq -r .data.token > consul_acl.token 
}


function uninstall() {
  echo "### Uninstalling yard"
  echo "#### You may be prompted for your password!###"
  echo ""
  
  sudo rm -f /usr/local/bin/yard
  sudo rm -rf $HOME/.shipyard
}


function check_latest() {
  curl -s "https://shipyard.demo.gs/latest_version.html" > $CONFIG/latest || true

  if [[ "$(cat $CONFIG/latest)" != "" ]];then
    if [[ "$(cat $CONFIG/latest)" != "$VERSION" ]];then
      echo "##############################################################"
      echo ""
      echo "Shipyard needs to be updated!"
      echo ""
      echo "You are using version: $VERSION"
      echo "Latest version: $(cat $HOME/.shipyard/latest)"
      echo ""
      echo "run \"yard upgrade\" to update to the latest version"
      echo ""
      echo "##############################################################"
      echo ""
    fi
  fi
}

function upgrade() {
  curl https://shipyard.demo.gs/install.sh | bash
  curl -s "https://shipyard.demo.gs/latest_version.html" > $CONFIG/latest || true
  local LATEST_VERSION=$(cat $CONFIG/LATEST)

  # Remove old docker images
  echo "Removing old Docker images"
  
  # Get the latest tools
  echo "Fetching latest tools"
  docker pull nicholasjackson/consul-k8s-tools:$LATEST_VERSION

  # Remove old tools
  local ALL=$(docker images --filter "reference=nicholasjackson/consul-k8s-tools:*" --format "{{.Repository}}:{{.Tag}}")
  echo "Clean up old tools"
  for IMAGE in $ALL
  do
    if [[ "$IMAGE" != "nicholasjackson/consul-k8s-tools:$LATEST_VERSION" ]] &&
       [[ "$IMAGE" != "nicholasjackson/consul-k8s-tools:latest" ]]; then
      docker rmi $IMAGE
    fi
  done

  # Has the user used the vscode version, if so fetch it
  local ALL=$(docker images --filter "reference=nicholasjackson/code-server:*" --format "{{.Repository}}:{{.Tag}}")
  if [[ "$ALL" != "" ]]; then
    # Get the latest vscode
    echo "Fetching latest vscode"
    docker pull nicholasjackson/code-server:$LATEST_VERSION

    # Clean up old version
    echo "Clean up old vscode images"
    for IMAGE in $ALL
    do
    if [[ "$IMAGE" != "nicholasjackson/code-server:$LATEST_VERSION" ]] &&
       [[ "$IMAGE" != "nicholasjackson/code-server:latest" ]]; then
        docker rmi $IMAGE
      fi
    done
  fi
}

function logo() {
  echo ""
  echo '     _______. __    __   __  .______   ____    ____  ___      .______       _______  '
  echo '    /       ||  |  |  | |  | |   _  \  \   \  /   / /   \     |   _  \     |       \ '
  echo '   |   (----`|  |__|  | |  | |  |_)  |  \   \/   / /  ^  \    |  |_)  |    |  .--.  |'
  echo '    \   \    |   __   | |  | |   ___/    \_    _/ /  /_\  \   |      /     |  |  |  |'
  echo '.----)   |   |  |  |  | |  | |  |          |  |  /  _____  \  |  |\  \----.|  .--.  |'
  echo '|_______/    |__|  |__| |__| | _|          |__| /__/     \__\ | _| `._____||_______/ '
  echo ""
  echo ""
  echo "Version: $VERSION"
  echo ""
}


case "$1" in
  "up")
    # check if consul port overriden
    CONSUL_PORT="8500"
    DASHBOARD_PORT="8443"
    TYPE="k3s"
    NAME="shipyard"
    CONSUL_VALUES="$CONFIG/config/helm-charts/consul-values.yaml"
    NETWORK="null"
    NETWORK_IP="auto"
    DOCKER_IMAGES=()

    while [[ $# -gt 0 ]]
    do
      case $1 in
          --type)
          TYPE="$2"
          shift # past argument
          shift # past value
          ;;
          --name)
          NAME="$2"
          shift # past argument
          shift # past value
          ;;
          --consul-port)
          CONSUL_PORT="$2"
          shift # past argument
          shift # past value
          ;;
          --dashboard-port)
          DASHBOARD_PORT="$2"
          shift # past argument
          shift # past value
          ;;    
          --consul-values)
          CONSUL_VALUES="$2"
          shift # past argument
          shift # past value
          ;;    
          --network)
          NETWORK="$2"
          shift # past argument
          shift # past value
          ;;    
          --network-ip)
          NETWORK_IP="$2"
          shift # past argument
          shift # past value
          ;;    
          --push-image)
          DOCKER_IMAGES+=("$2")
          shift # past argument
          shift # past value
          ;;
          --help)
          logo;
          check_latest;

          echo "up - Create a K8s server with Consul" 
          echo ""
          echo "Options: "
          echo "  --type=k3s:                                               Type of cluster [k3s, k8s]"
          echo "  --consul-port=8500:                                       Local port to expose for Consul" 
          echo "  --dashboard-port=8443:                                    Local port for Kubnernetes dashboard" 
          echo "  --consul-values=\$HOME/.shipyard/config/consul-values.yml: Helm chart values to use when creating Consul" 
          echo "  --name=shipyard:                                          Name for the cluster"
          echo "  --network=null:                                           Docker network to attach cluster to"
          echo "  --network-ip=autogenerated:                               IP address in the docker network to allocate"
          echo "  --push-image=null:                                        Docker image from local Docker to push to Kubernetes worker cache,"
          echo "                                                            can be specified multiple times."
          exit 1
          ;;
          *)    # unknown option
          shift # past argument
          ;;
      esac
    done

    logo;
    check_latest;
    echo "## Creating K8s cluster in Docker and installing Consul"
    echo ""
    up $TYPE $NAME $CONSUL_PORT $DASHBOARD_PORT $CONSUL_VALUES $NETWORK $NETWORK_IP ${DOCKER_IMAGES[@]};
    ;;
  "down")
    NAME="shipyard"

    while [[ $# -gt 0 ]]
    do
      case $1 in
          --name)
          NAME="$2"
          shift # past argument
          shift # past value
          ;;
          --help)
          logo;
          check_latest;

          echo "down - Destroy K8s server"
          echo ""
          echo "Options: "
          echo "  --name=shipyard: Name of the cluster to destroy"
          exit 1
          ;;
          *)    # unknown option
          shift # past argument
          ;;
      esac
    done

    logo;
    check_latest;
    echo "## Stopping Kubernetes and cleaning resources"
    
    # get active type from state
    if [ $(cat $CONFIG/yards/$NAME/state) == "k3s" ]; then
      down "k3s" $NAME;
    else
      down "k8s" $NAME;
    fi
    ;;
  "expose")
    SERVICE_NAME=""
    SERVICE_PORT=()
    NETWORK="null"
    NETWORK_IP="auto"
    BIND_IP="0.0.0.0"
    NAME="shipyard"
    NAMESPACE="default"

    while [[ $# -gt 0 ]]
    do
      case $1 in
          --name)
          NAME="$2"
          shift # past argument
          shift # past value
          ;;
          --service-name)
          SERVICE_NAME="$2"
          shift # past argument
          shift # past value
          ;;
          --port)
          SERVICE_PORT+=("$2")
          shift # past argument
          shift # past value
          ;;
          --namespace)
          NAMESPACE="$2"
          shift # past argument
          shift # past value
          ;;    
          --bind-ip)
          BIND_IP="$2"
          shift # past argument
          shift # past value
          ;;    
          --network)
          NETWORK="$2"
          shift # past argument
          shift # past value
          ;;    
          --network-ip)
          NETWORK_IP="$2"
          shift # past argument
          shift # past value
          ;;    
          --help)
          logo;
          check_latest;

          echo "expose - expose a kubernetes pod or service locally"
          echo ""
          echo "Options: "
          echo "  --service-name:             Name of the pod or service"
          echo "  --port:                     Local and service ports to expose e.g. 8500:8500," 
          echo "                              can be specified multiple times." 
          echo "  --namespace:                Kubernetes namespace containing the pod or service" 
          echo "  --bind-ip=0.0.0.0:          IP address to bind to,"
          echo "                              use value \"none\" disable host binding"
          echo "  --network=null:             Name of the Docker network to connect the port to"
          echo "  --network-ip=autogenerated: IP address in the docker network to assign"
          echo "  --name=shipyard:            Name of the cluster"
          echo ""
          echo "Usage:"
          echo "  Expose Kubernetes service web-service port 9090 and 9091 on all IP addresses"
          echo "  \"yard expose --service-name svc/web-service --port 9090:9090 --port 9091:9091\""
          echo ""
          echo "  Expose Kubernetes pod web234af port 9090 on localhost 9091"
          echo "  \"yard expose --service-name web234af --port 9091:9090 --bind-ip 127.0.0.1\""
          exit 1
          ;;
          *)    # unknown option
          shift # past argument
          ;;
      esac
    done

    if [[ "$SERVICE_NAME" == "" ]]; then
      echo "Flag --service-name is required"
      exit 1
    fi
    
    if [[ "${#SERVICE_PORT[@]}" == "0" ]]; then
      echo "Flag --port [local:remote] is required"
      exit 1
    fi

    logo;
    check_latest;
    echo "## Expose service: $SERVICE_NAME ports: ${SERVICE_PORT[@]} using network $NETWORK"
    expose_port $NAME $SERVICE_NAME $NETWORK $NETWORK_IP $BIND_IP $NAMESPACE ${SERVICE_PORT[@]}
    ;;
  "tools")
    NAME="shipyard"
    FOLDER=$(pwd)

    while [[ $# -gt 0 ]]
    do
      case $1 in
          --name)
          NAME="$2"
          shift # past argument
          shift # past value
          ;;
          --folder)
          FOLDER="$2"
          shift # past argument
          shift # past value
          ;;
          --help)
          logo;
          check_latest;

          echo "tools - Run an interactive shell with Consul CLI, kubectl, etc."
          echo ""
          echo "Options: "
          echo "  --name=shipyard:           Name of the cluster"
          echo "  --folder=current folder:   Working folder to map to /work in shell"
          exit 1
          ;;
          *)
          shift
          ;;
      esac
    done

    logo;
    check_latest;
    echo "## Running tools container";
    echo "";
    tools $NAME $FOLDER;
    ;;
  "exec")
    NAME="shipyard"
    FOLDER=$(pwd)
    COMMAND=""

    while [[ $# -gt 0 ]]
    do
      case $1 in
          --name)
          NAME="$2"
          shift # past argument
          shift # past value
          ;;
          --folder)
          FOLDER="$2"
          shift # past argument
          shift # past value
          ;;
          --)
          COMMAND=${@:2}
          shift # past argument
          shift # past value
          ;;
          --help)
          logo;
          check_latest;

          echo "exec - Run a command in the tools container"
          echo ""
          echo "Options: "
          echo "  --name=shipyard:         Name of the cluster"
          echo "  --folder=current folder: Working folder to map to /work"
          echo "  --:                      Command to execute "
          echo ""
          echo "Usage:"
          echo "  To apply Kubernetes config file (myfile.yml) from the current folder"
          echo "  \"yard tools --folder \$PWD -- kubectl apply -f /work/myfile.yml\""
          exit 1
          ;;
          *)
          shift
          ;;
      esac
    done

    echo "## Running command $COMMAND on cluster $NAME";
    echo "";
    tools $NAME $FOLDER $COMMAND;
    ;;
  "push")
    IMAGE=""
    NAME="shipyard"
    
    while [[ $# -gt 0 ]]
    do
      case $1 in
          --name)
          NAME="$2"
          shift # past argument
          shift # past value
          ;;
          --image)
          IMAGE="$2"
          shift # past argument
          shift # past value
          ;;
          --help)
          logo;
          check_latest;

          echo "push - Push a local Docker image to the cluster"
          echo ""
          echo "Options: "
          echo "  --image:         Name of the local Docker image to push"
          echo "  --name=shipyard: Name of the cluster"
          echo ""
          echo "Usage:"
          echo "  To push the local Docker image \"nicholasjackson/fake-service:v12.2\", which is not in a remote registry to Kubernetes"
          echo "  \"yard push --image nicaholasjackson/fake-service:v12.2\""
          exit 1
          ;;
          *)
          shift
          ;;
      esac
    done

    echo "## Pushing image ${IMAGE} to cluster $NAME";
    push_image $IMAGE $NAME
    ;;
  "upgrade")
    logo;
    echo "Upgrading to latest version";
    echo "";
    upgrade;
    ;;
  "uninstall")
    logo;
    uninstall;
    ;;
  "vscode")
    NAME="shipyard"
    FOLDER=$(pwd)
    SETTINGS=$CONFIG/config/vscode_settings.json

    while [[ $# -gt 0 ]]
    do
      case $1 in
          --name)
          NAME="$2"
          shift # past argument
          shift # past value
          ;;
          --settings)
          SETTINGS="$2"
          shift # past argument
          shift # past value
          ;;
          --folder)
          FOLDER="$2"
          shift # past argument
          shift # past value
          ;;
          --help)
          logo;
          check_latest;

          echo "vscode - Run Visual Studio Code in a browser"
          echo ""
          echo "Options: "
          echo "  --name=shipyard:                                             Name of the cluster"
          echo "  --folder=current folder:                                     Working folder to map to /home/coder/project"
          echo "  --settings-file=\$HOME/.shipyard/config/vscode_settings.json: VSCode settings file"
          exit 1
          ;;
          *)
          shift
          ;;
      esac
    done

    logo;
    echo "## Starting VSCode in a browser"
    vs_code $NAME $FOLDER $SETTINGS;
    ;;
  "create")
    echo "### Creating Kubernetes cluster, this process will take approximately 2 minutes";
    echo ""

    TYPE=$2
    NAME=$3
    CONSUL_PORT=$4
    DASHBOARD_PORT=$5
    NETWORK=$6
    NETWORK_IP=$7
    DOCKER_IMAGES=${@:8}

    export KUBECONFIG="$(pwd)/yards/$NAME/kubeconfig.yml"
    
    if [[ $TYPE == "k8s" ]]; then
      install_cluster $NAME $CONSUL_PORT $DASHBOARD_PORT $NETWORK $NETWORK_IP ${DOCKER_IMAGES[@]};
    else
      install_cluster_k3s $NAME $CONSUL_PORT $DASHBOARD_PORT $NETWORK $NETWORK_IP ${DOCKER_IMAGES[@]}
    fi

    install_core;
    install_k8s;
    install_consul;

    echo "";
    echo "### Setup complete:";
    echo "";
    echo "To interact with Kubernetes set your KUBECONFIG environment variable";
    echo "export KUBECONFIG=\"\$HOME/.shipyard/yards/$NAME/kubeconfig.yml\"";
    echo "";
    echo "Consul can be accessed at: http://localhost:$CONSUL_PORT";
    echo "Kubernetes dashboard can be accessed at: http://localhost:$DASHBOARD_PORT";
    echo "";
    echo "To expose Kubernetes pods or services use the 'yard expose' command. e.g."
    echo "yard expose --service-name svc/myservice --port 8080:8080"
    echo ""
    echo "When finished use \"yard down\" to cleanup and remove resources";
    ;;
  "destroy")
    TYPE=$2
    NAME=$3
    if [[ $TYPE == "k3s" ]]; then
      destroy_k3s $NAME;
    else
      destroy $NAME;
    fi
    ;;
  *)
    logo;
    check_latest;

    echo "Commands:"
    echo "  up        - Create a K8s server with Consul" 
    echo "  down      - Stop K8s server"
    echo "  expose    - expose a kubernetes pod or service locally"
    echo "  tools     - Interactive shell with Consul CLI, kubectl, helm, etc."
    echo "  push      - Push a local Docker image to the cluster"
    echo "  vscode    - Run Visual Studio Code in a browser"
    echo "  upgrade   - Upgrade yard to latest version"
    echo "  uninstall - Remove yard from this machine"
    echo ""
    echo "Global flags:"
    echo "  --help      show command help"
    exit 1 
    ;;
esac
